vue笔记: 李飞钒
vue的核心是:数据驱动 组件系统 
model:代表数据模型,数据和业务逻辑都在model层中定义
view:代表UI视图,负责数据的展示。
viewmodel:负责监听model中数据的改变并且控制视图的更新,处理用户交互操作。
是一套用于构建用户界面的渐进式框架。
安装:
cnpm i vue  
npm i vue
用法:
  1  直接引入  *
  2  框架式开发，vue-cli
mvvm框架由model view viewmodel 组成
{{}}双花括号 模板语法,模板输出相当于原输出(innerText)
innerText可以解析标签 innerHTML不能解析标签只要标签里面的内容。
vue指令:
v-html ==>innerHTML
v-text==>innerText
v-show==>显示隐藏(只是简单的基于css切换)没有缓存,适合频繁切换
v-if==>条件判断,真实条件的渲染,只加载条件为真的部分有缓存,消耗高只适合偶尔判断。
v-else
v-on 事件绑定 v-on:click='' 简写@click=''
v-bind 属性绑定 简写:style{}一个对象用{}两个用数组:style[{},{}]
v-if-else
v-model 双向绑定三个修饰符.lazy(取代 input 监听 change 事件) .number(输入字符串转为有效的数字) .trim(输入首尾空格过滤)
v-slot 	组件系统 插槽
v-pre 	不需要表达式跳过编译,不被渲染
v-cloak 不需要表达式页面渲染完成之后消失,需要配合css一起使用[v-cloak]{display:none;}
v-once  不需要表达式只渲染一次
v-for 循环数组和json对象等 v-for="(item,index)in obj" v-for="item in obj"
*数组  v-for="(i,$index) in arr"
*对象  v-for="(i,$key,$index) in json"
vue生命周期钩子函数
创建前 beforeCreate
创建后 created
渲染前 beforeMount
渲染后 mounted
视图(view)更新前 beforeUpdate
视图(view)更新后 updated
销毁前 beforeDestroy
销毁后 destroyed
v-bind
     :style
        :style="{color:'',}"
        :style="[{color:''},{color:''}]"
     :class
         :class="'a'"
          :class="['a','b']"

--------------------------------------------------------------
侦听属性
      watch
       -》针对一个变量进行监听
  watch:{ 
    name(修改后，修改前){
    }
  }
计算属性 特点:有缓存
     computed
       return
    
     computed:{
    name(){}
  }
 注意事项:
 数组 json
  数组:1.通过下标改数值
  2.通过length改长度
  js方法 this.arr.splice(0,1,'hello')
  vue方法 this.$set(this.arr,0,'hello')
  this.$set(要改变的对象,位置,'替换的内容')
  length需要声明变量接受 let this.arr=this.arr.splice(0,2)
  json 无中生有
  this.$set(this.json,'替换的$key值','替换的内容')
  ajax部分
  get
      this.$http.get(url,{params:{}}).then((data)=>{},(err)=>{})
  post
     this.$http.post(url,{data},{emulateJSON:true}).then((data)=>{},(err)=>{})
  jsonp
     this.$http.jsonp(url,{params:{},callback:name}).then((data)=>{},(err)=>{})
  computed 可以计算属性计算咋们的data
  属性必须是函数
  c(){
  	return
  }
  c(){
  	//读取
  	get(){}
  	设置
  	set(){}
  }
  实例方法
  $mount('')这个级别没有咱们的el高
  $data 就是data
  $el 可以帮咱们获取原生的dom对象
  $options 获取自定义属性/正常属性
  $log可以帮助我们看到data的内容
  $destroy销毁对象
  track-by="$index"
  
  vue动画
  name="自定义的名称"
  <transition name="自定义的名称">
  </transition>
  自定义的名称-enter
  fade-enter 进入之前的状态
  fade-enter-active 进入之后的状态
  fade-leave 消失之前的状态
  fade-leave-active 消失的状态
  动画的生命周期
  before-enter进入之前
  enter进入时
  after-enter动画进入完毕
  before-leave动画要离开了
  leave动画离开的过程中
  after-leave动画离开完毕
  组件
  必须有根元素
  数据同步
  <complate>标签
  is属性是哪个组件就把名字给is属性即可
  组件是可以无限去套组件的,只能套自己下面的第一层组件
  第三层只能用第2层套
  父子级数据交互
  父级传子级
  需要一个自定义属性
  <fuj :leo="msg"></fuj>
  props:['leo']
  props:{
  	leo:Number/String/Object
  }
  如果父级传对象 就是js的对象的引用
  不同步:让父级数据不是对象即可
  //过滤了
  数据交互方式
  1.外部单放一个 实例化对象
  let vm=new Vue()
  vm.$emit('key',value)
  触发当前实例上的事件。附加参数都会传给监听器回调。
  key 人家回头接受的名字
  valve 你传递的数据
  vm.$on('key',(data)=>{
  	
  })
  key:接受的名头
  函数里面data:就是刚才传递的数据 回调函数
  slot 组件-位置咱们的组件可以放人任何html代码
  当然你要想让他们实现的话,需要你在组件里面使用slot标签
  这个标签就替代了你组件中的html代码
  更精准的话
  slot="自定义值"
  <slot name=""> 
  自定义指令
  / 注册
  Vue.directive('my-directive', {
    bind: function () {},
    inserted: function () {},
    update: function () {},
    componentUpdated: function () {},
    unbind: function () {}
  })
  // 注册 (指令函数)
  Vue.directive('my-directive', function () {
    // 这里将会被 `bind` 和 `update` 调用
  })
  
  // getter，返回已注册的指令
  var myDirective = Vue.directive('my-directive')
  路由:
  routes名字比较敏感
  <router-link to="/自定义名字">
  1.创建模板
  2.配置路由必须是数组注意必须名字叫routes
  3.生成路由 let router=new VueRouter({})
  4.启动路由
  <router-link to="/地址"></router>	
  <router-view></router-view> 
  //视图非常重要
  // 1.创建模板
  	let home={
  		template:'<p>我是主页</p>'
  	}
  	let news={
  		template:'<p>我是新闻页</p>'
  	}
  	let games={
  		template:'<p>我是游戏页</p>'
  	}
  	// 2.配置路由是个数组
  	let routes=[
  		{path:'/home',component:home},
  		{path:'/news',component:news},
  		{path:'/games',component:games}
  		//设置默认页数
  	]
  	
  	// 3.生成路由
  	let router=new VueRouter({
  		routes                       
  	})
  	// 4.启动路由
  	new Vue({
  		el:"#box",
  		router 
  	})
  	选中的路由有个class 
  	router-link-exact-active
  2.x脚手架
  simple  入门
  webpack 严谨做一些查错
  webpack-simple
  
  
  